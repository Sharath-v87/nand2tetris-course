// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=acont);
    Not(in=acont, out=ccont);
    And(a=ccont, b=instruction[5], out=muxsel);
    Mux16(a=instruction, b=opbranch, sel=muxsel , out=aregin);
    Or(a=acont, b=muxsel, out=aload);
    ARegister(in=aregin, load=aload, out=secmuxip);
    Mux16(a=secmuxip, b=inM, sel=instruction[12] , out=aluip1);
    And(a=ccont, b=instruction[4], out=dload);
    DRegister(in=opbranch, load=dload, out=dregop);
    ALU(x=dregop, y=aluip1, zx=instruction[11] , nx=instruction[10] , zy=instruction[9] , ny=instruction[8] , f=instruction[7] , no=instruction[6], out=outM, out=opbranch, zr=zrop , ng=ngop);
    And(a=ccont, b=instruction[3], out=writeM);
    Or16(a=secmuxip, b=false, out[0..14]=addressM);

    Not(in=zrop, out=zrnot);
    Not(in=ngop, out=ngnot);
    And(a=zrnot, b=ngnot, out=positive);
    And(a=positive, b=instruction[0], out=posi);

    And(a=posi, b=instruction[0], out=jgt);
    And(a=zrop, b=instruction[1], out=jeq);
    Or(a=jgt, b=jeq, out=jge);
    Or(a=ngop, b=false, out=jlt);
    Or(a=jlt, b=jgt, out=jne);
    Or(a=jlt, b=jeq, out=jle);
    Or(a=zrop, b=ngop, out=kewk);
    Or(a=kewk, b=posi, out=jmp);

    Mux(a=posi, b=jgt, sel=instruction[0], out=jumpa);
    Mux(a=jeq, b=jge, sel=instruction[0], out=jumpb);
    Mux(a=jlt, b=jne, sel=instruction[0], out=jumpc);
    Mux(a=jle, b=jmp, sel=instruction[0], out=jumpd);
    Mux(a=jumpa, b=jumpb, sel=instruction[1], out=jumpe);
    Mux(a=jumpc, b=jumpd, sel=instruction[1], out=jumpf);
    Mux(a=jumpe, b=jumpf, sel=instruction[2], out=actjump);

    And(a=ccont, b=actjump, out=incre);
    Not(in=incre, out=notinc);

    PC(in=secmuxip, load=incre , inc=notinc , reset=reset, out[0..14]=pc);
}